import sqlite3
import time
import html
from random import uniform

from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

DB_PATH = "breast_bot.db"
COOLDOWN_SECONDS = 60 * 60  # 1 —á–∞—Å

# üîë —Ç–æ–∫–µ–Ω (–∫–∞–∫ –ø—Ä–æ—Å–∏–ª ‚Äî –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ)
TOKEN = "8383787249:AAENs2jqlQAIV8FdgIFWPXDw7CUkFSFKRZY"

# üëë —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
ADMINS = [1338785758, 6540420056]

def init_db():
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    # per-chat –ø—Ä–æ–≥—Ä–µ—Å—Å
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS progress (
            chat_id     INTEGER NOT NULL,
            user_id     INTEGER NOT NULL,
            display_name TEXT,
            last_ts     INTEGER DEFAULT 0,
            total_added REAL    DEFAULT 0,
            PRIMARY KEY (chat_id, user_id)
        )
        """
    )
    con.commit()
    con.close()

def get_row(chat_id: int, user_id: int):
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute("SELECT last_ts, total_added, display_name FROM progress WHERE chat_id=? AND user_id=?",
                (chat_id, user_id))
    row = cur.fetchone()
    con.close()
    return row  # None | (last_ts, total_added, display_name)

def upsert_row(chat_id: int, user_id: int, *, display_name: str = None,
               last_ts: int = None, total_added: float = None):
    """–°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è."""
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    # ensure exists
    cur.execute("INSERT OR IGNORE INTO progress (chat_id, user_id, display_name, last_ts, total_added) VALUES (?, ?, ?, 0, 0.0)",
                (chat_id, user_id, display_name or ""))
    # –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–ø–¥–µ–π—Ç
    sets = []
    params = []
    if display_name is not None:
        sets.append("display_name=?"); params.append(display_name)
    if last_ts is not None:
        sets.append("last_ts=?"); params.append(last_ts)
    if total_added is not None:
        sets.append("total_added=?"); params.append(total_added)
    if sets:
        params.extend([chat_id, user_id])
        cur.execute(f"UPDATE progress SET {', '.join(sets)} WHERE chat_id=? AND user_id=?", params)
    con.commit()
    con.close()

def fmt_left(seconds: int) -> str:
    m, s = divmod(seconds, 60)
    return (f"{m} –º–∏–Ω {s} —Å–µ–∫" if m and s else f"{m} –º–∏–Ω" if m else f"{s} —Å–µ–∫")

def mention_html_by_id(user_id: int, name: str) -> str:
    return f'<a href="tg://user?id={user_id}">{html.escape(name)}</a>'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    user = update.effective_user
    chat_id, uid = chat.id, user.id
    display_name = user.full_name

    row = get_row(chat_id, uid)
    if row is None:
        last_ts, total_added, _ = 0, 0.0, ""
    else:
        last_ts, total_added, _ = row

    now = int(time.time())
    elapsed = now - last_ts

    # –æ–±–Ω–æ–≤–∏–º –∏–º—è –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    upsert_row(chat_id, uid, display_name=display_name)

    if elapsed < COOLDOWN_SECONDS:
        left = COOLDOWN_SECONDS - elapsed
        await update.message.reply_html(
            f"‚è≥ {user.mention_html()} –µ—â—ë —Ä–∞–Ω–æ–≤–∞—Ç–æ! "
            f"–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏—Ä–æ—Å—Ç —á–µ—Ä–µ–∑ <b>{fmt_left(left)}</b>."
        )
        return

    inc = round(uniform(1, 5), 2)
    total_added = round(total_added + inc, 2)
    upsert_row(chat_id, uid, last_ts=now, total_added=total_added)

    await update.message.reply_html(
        f"üéâ {user.mention_html()} –ø–æ–ª—É—á–∏–ª(–∞) –ø—Ä–∏—Ä–æ—Å—Ç <b>+{inc} —Å–º</b>!\n"
        f"üìà –°—É–º–º–∞—Ä–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ: <b>{total_added} —Å–º</b>.\n"
        f"‚õîÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω–æ ‚Äî —á–µ—Ä–µ–∑ 1 —á–∞—Å."
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    uid = user.id

    row = get_row(chat_id, uid)
    if row is None:
        last_ts, total_added, _ = 0, 0.0, ""
    else:
        last_ts, total_added, _ = row

    now = int(time.time())
    left = max(0, COOLDOWN_SECONDS - (now - last_ts))
    tip = (f"–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {fmt_left(left)}."
           if left > 0 else "–ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏—Ä–æ—Å—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∫–æ–º–∞–Ω–¥–æ–π /start.")
    await update.message.reply_html(
        f"üìä {user.mention_html()}, –≤–∞—à —Å—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ: <b>{total_added} —Å–º</b>.\n{tip}"
    )

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = update.effective_user
    uid = user.id
    if uid not in ADMINS:
        await update.message.reply_text("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    row = get_row(chat_id, uid)
    if row is None:
        upsert_row(chat_id, uid, last_ts=0, total_added=0.0)
    else:
        _, total_added, _ = row
        upsert_row(chat_id, uid, last_ts=0, total_added=total_added)
    await update.message.reply_text("‚úÖ –ö—É–ª–¥–∞—É–Ω —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ /start.")

# –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É
async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    chat_id = chat.id

    # —Å–∫–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å: /top 5  (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
    try:
        limit = int(context.args[0]) if context.args else 10
        limit = max(1, min(50, limit))
    except Exception:
        limit = 10

    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute(
        "SELECT user_id, display_name, total_added FROM progress "
        "WHERE chat_id=? ORDER BY total_added DESC LIMIT ?",
        (chat_id, limit),
    )
    rows = cur.fetchall()
    con.close()

    if not rows:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—Ä–∞—Å—Ç–∏–ª –≤ —ç—Ç–æ–º —á–∞—Ç–µ üòÖ")
        return

    lines = []
    for i, (uid, name, total) in enumerate(rows, start=1):
        mention = mention_html_by_id(uid, name or f"id:{uid}")
        lines.append(f"{i}. {mention} ‚Äî <b>{total} —Å–º</b>")

    await update.message.reply_html("üèÜ –¢–æ–ø –ø–æ —ç—Ç–æ–º—É —á–∞—Ç—É:\n" + "\n".join(lines))

# ¬´–º–∞—Ü–∞—Ç—å¬ª ‚Äî –±–µ–∑ —Å–ª—ç—à–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ reply
async def macat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    actor = update.effective_user
    if not msg or not msg.reply_to_message or not msg.reply_to_message.from_user:
        await msg.reply_text("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–º–∞—Ü–∞—Ç—å¬ª.")
        return
    target = msg.reply_to_message.from_user
    text = f"ü§è {actor.mention_html()} –ø–æ–º–∞—Ü–∞–ª(–∞) {target.mention_html()} üò≥"
    await msg.reply_html(text)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏—Ä–æ—Å—Ç (—Ä–∞–∑ –≤ —á–∞—Å)\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–º (–≤ —ç—Ç–æ–º —á–∞—Ç–µ)\n"
        "/top [N] ‚Äî —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "(–≤ –≥—Ä—É–ø–ø–µ) –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–º–∞—Ü–∞—Ç—å¬ª\n"
        "(/reset ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
    )

def main():
    init_db()
    app = Application.builder().token(TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler(["start", "growchest"], start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("top", top))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("reset", reset))

    # –º–∞—Ü–∞—Ç—å (–Ω—É–∂–Ω–æ /setprivacy Disable —É –±–æ—Ç–∞)
    macat_filter = filters.TEXT & filters.Regex(r"(?i)\b–º–∞—Ü–∞—Ç—å\b") & filters.REPLY
    app.add_handler(MessageHandler(macat_filter, macat_handler))

    print("Bot is running‚Ä¶")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
