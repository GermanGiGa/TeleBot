import asyncio
import sqlite3
import time
from random import uniform

from telegram import Update
from telegram.error import RetryAfter
from telegram.ext import (Application, CommandHandler, 
    MessageHandler, ContextTypes, filters,)
    

DB_PATH = "breast_bot.db"
COOLDOWN_SECONDS = 60 * 60  # 1 —á–∞—Å

# üîë —Ç–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = "8383787249:AAENs2jqlQAIV8FdgIFWPXDw7CUkFSFKRZY"

# üëë —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–≤–ø–∏—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ ID)
ADMINS = [8147146526, 7689278428, 6540420056, 1338785758]


# ======================= –ë–ê–ó–ê –î–ê–ù–ù–´–• =======================

def init_db():
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    # –ë–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–ø–∏—Å–∏
    cur.execute("PRAGMA journal_mode=WAL;")
    cur.execute("PRAGMA synchronous=NORMAL;")
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            last_ts INTEGER DEFAULT 0,
            total_added REAL DEFAULT 0
        )
        """
    )
    # –ò–Ω–¥–µ–∫—Å—ã –Ω–µ –Ω—É–∂–Ω—ã, —Ç.–∫. PK —É–∂–µ –Ω–∞ user_id
    con.commit()
    con.close()


def get_user(user_id: int):
    """–ù–∞–¥—ë–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (last_ts, total_added) –∏ —Å–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –ø—Ä–∏ –µ—ë –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏."""
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    # –ë–µ–∑–≥–æ–Ω–æ—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    cur.execute(
        "INSERT OR IGNORE INTO users (user_id, last_ts, total_added) VALUES (?, 0, 0.0)",
        (user_id,)
    )
    con.commit()
    cur.execute("SELECT last_ts, total_added FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    con.close()
    # row –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –µ—Å—Ç—å
    return row[0], row[1]


def update_user(user_id: int, last_ts: int, total_added: float):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∂—ë—Å—Ç–∫–∏–º –ª–∏–º–∏—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–π."""
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç -10000 –¥–æ 10000
   con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute(
        "UPDATE users SET last_ts=?, total_added=? WHERE user_id=?",
        (last_ts, total_added, user_id),
    )
    con.commit()
    con.close()


def fmt_left(seconds: int) -> str:
    m, s = divmod(int(seconds), 60)
    return (f"{m} –º–∏–Ω {s} —Å–µ–∫" if m and s else f"{m} –º–∏–Ω" if m else f"{s} —Å–µ–∫")


# ======================= –ö–û–ú–ê–ù–î–´ =======================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    last_ts, total_added = get_user(uid)
    now = int(time.time())
    elapsed = now - last_ts

    if elapsed < COOLDOWN_SECONDS:
        left = COOLDOWN_SECONDS - elapsed
        await update.message.reply_html(
            f"‚è≥ {user.mention_html()} –µ—â—ë —Ä–∞–Ω–æ–≤–∞—Ç–æ! "
            f"–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏—Ä–æ—Å—Ç —á–µ—Ä–µ–∑ <b>{fmt_left(left)}</b>."
        )
        return

    inc = round(uniform(1, 5), 2)
    total_added = round(total_added + inc, 2)
    update_user(uid, now, total_added)

    await update.message.reply_html(
        f"üéâ {user.mention_html()} –ø–æ–ª—É—á–∏–ª(–∞) –ø—Ä–∏—Ä–æ—Å—Ç <b>+{inc} —Å–º</b>!\n"
        f"üìà –°—É–º–º–∞—Ä–Ω–æ: <b>{total_added} —Å–º</b>.\n"
        f"‚õîÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω–æ ‚Äî —á–µ—Ä–µ–∑ 1 —á–∞—Å."
    )


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    last_ts, total_added = get_user(uid)
    now = int(time.time())
    left = max(0, COOLDOWN_SECONDS - (now - last_ts))
    tip = (f"–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {fmt_left(left)}."
           if left > 0 else "–ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏—Ä–æ—Å—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∫–æ–º–∞–Ω–¥–æ–π /start.")
    await update.message.reply_html(
        f"üìä {user.mention_html()}, –≤–∞—à —Å—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç: <b>{total_added} —Å–º</b>.\n{tip}"
    )


async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    if uid not in ADMINS:
        await update.message.reply_text("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    last_ts, total_added = get_user(uid)
    update_user(uid, 0, total_added)
    await update.message.reply_text("‚úÖ –ö—É–ª–¥–∞—É–Ω —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ /start.")


# üëë /setSize ‚Äî –∞–¥–º–∏–Ω: –ø–æ reply –ò–õ–ò –ø–æ user_id
async def set_size(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    caller_id = update.effective_user.id

    if caller_id not in ADMINS:
        await msg.reply_text("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return

    target_user = None
    size = None

    # –í–∞—Ä–∏–∞–Ω—Ç 1: –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî /setSize 123.45
    if msg.reply_to_message and msg.reply_to_message.from_user:
        target_user = msg.reply_to_message.from_user
        if len(context.args) < 1:
            await msg.reply_text("‚ö† –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä. –ü—Ä–∏–º–µ—Ä: /setSize 25")
            return
        try:
            size = float(context.args[0])
        except ValueError:
            await msg.reply_text("‚ö† –†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

    # –í–∞—Ä–∏–∞–Ω—Ç 2: /setSize <user_id> <size>
    elif len(context.args) >= 2:
        try:
            target_user_id = int(context.args[0])
            # –±–µ—Ä—ë–º —é–∑–µ—Ä–∞ –∏–∑ —á–∞—Ç–∞, —á—Ç–æ–±—ã –∫—Ä–∞—Å–∏–≤–æ —É–ø–æ–º—è–Ω—É—Ç—å
            member = await context.bot.get_chat_member(update.effective_chat.id, target_user_id)
            target_user = member.user
            size = float(context.args[1])
        except ValueError:
            await msg.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setSize <user_id> <size>")
            return
        except Exception:
            # –µ—Å–ª–∏ —é–∑–µ—Ä –Ω–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –≤—Å—ë —Ä–∞–≤–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–º –ø–æ ID –∏ —É–ø–æ–º—è–Ω–µ–º –∫–∞–∫ —Å—Å—ã–ª–∫—É
            target_user = type("Dummy", (), {})()
            target_user.id = target_user_id
            target_user.first_name = f"user {target_user_id}"
            target_user.mention_html = lambda: f"<a href='tg://user?id={target_user_id}'>user {target_user_id}</a>"
    else:
        await msg.reply_text("‚ö† –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setSize <user_id> <size>")
        return

    # –õ–∏–º–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–π
    size = max(-10000, min(size, 10000))   # –ª–∏–º–∏—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è setSize
    # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
    last_ts, _ = get_user(target_user.id)
    update_user(target_user.id, last_ts, size)

    # –ß–∏—Ç–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
    _, check_total = get_user(target_user.id)
    await msg.reply_html(
        f"‚úÖ –†–∞–∑–º–µ—Ä –¥–ª—è {target_user.mention_html()} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{check_total:.2f} —Å–º</b>"
    )


# /top ‚Äî —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã–µ
async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat

    # –ë–µ—Ä—ë–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –∏–∑ –ë–î
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute("SELECT user_id, total_added FROM users")
    rows = cur.fetchall()
    con.close()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–µ–º, –∫—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≠–¢–û–ú —á–∞—Ç–µ
    leaderboard = []
    for uid, total in rows:
        try:
            cm = await context.bot.get_chat_member(chat.id, int(uid))
            if cm.status not in ("left", "kicked"):  # —É—á–∞—Å—Ç–Ω–∏–∫ –∑–¥–µ—Å—å
                leaderboard.append((cm.user, float(total)))
        except Exception:
            continue

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    leaderboard.sort(key=lambda x: x[1], reverse=True)

    if not leaderboard:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—Ä–∞—Å—Ç–∏–ª.")
        return

    # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
    lines = ["üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:"]
    for i, (u, total) in enumerate(leaderboard[:10], start=1):
        lines.append(f"{i}. {u.mention_html()} ‚Äî {total:.2f} —Å–º")

    await update.message.reply_html("\n".join(lines))


# ¬´–º–∞—Ü–∞—Ç—å¬ª ‚Äî –±–µ–∑ —Å–ª—ç—à–∞, —Ç–æ–ª—å–∫–æ reply
async def macat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    actor = update.effective_user
    if not msg or not msg.reply_to_message or not msg.reply_to_message.from_user:
        await msg.reply_text("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–º–∞—Ü–∞—Ç—å¬ª.")
        return
    target = msg.reply_to_message.from_user
    text = f"ü§è {actor.mention_html()} –ø–æ–º–∞—Ü–∞–ª(–∞) {target.mention_html()} üò≥"
    await msg.reply_html(text)


# ¬´—É—â–∏–ø–Ω—É—Ç—å¬ª ‚Äî –±–µ–∑ —Å–ª—ç—à–∞, —Ç–æ–ª—å–∫–æ reply
async def shchipok_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    actor = update.effective_user
    if not msg or not msg.reply_to_message or not msg.reply_to_message.from_user:
        await msg.reply_text("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´—É—â–∏–ø–Ω—É—Ç—å¬ª.")
        return
    target = msg.reply_to_message.from_user
    text = f"üëâ {actor.mention_html()} —É—â–∏–ø–Ω—É–ª(–∞) {target.mention_html()} –∑–∞ –∂–æ–ø—É üçë"
    await msg.reply_html(text)


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏—Ä–æ—Å—Ç (—Ä–∞–∑ –≤ —á–∞—Å)\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/top ‚Äî —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞\n"
        "/setSize ‚Äî –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä)\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "(–≤ –≥—Ä—É–ø–ø–µ) –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–º–∞—Ü–∞—Ç—å¬ª –∏–ª–∏ ¬´—É—â–∏–ø–Ω—É—Ç—å¬ª\n"
        "(/reset ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
    )


# ======================= –û–®–ò–ë–ö–ò/–õ–ò–ú–ò–¢–´ =======================

async def on_error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –¢–∏—Ö–æ –ø–µ—Ä–µ–∂–¥–∞—Ç—å –ª–∏–º–∏—Ç Telegram
    if isinstance(context.error, RetryAfter):
        try:
            await asyncio.sleep(context.error.retry_after)
        except Exception:
            pass
        return
    # –ú–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –∫–æ—Ä–æ—á–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±–∏–≤–∞—Ç—å Railway
    # print(f"Error: {context.error}")


# ======================= MAIN =======================

def main():
    init_db()
    app = (
        Application
        .builder()
        .token(TOKEN)
        .concurrent_updates(False)        # –ø–æ –æ–¥–Ω–æ–º—É –∞–ø–¥–µ–π—Ç—É –∑–∞ —Ä–∞–∑
        .build()
    )

    app.add_handler(CommandHandler(["start", "growchest"], start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("setSize", set_size))
    app.add_handler(CommandHandler("top", top))

    macat_filter = filters.TEXT & filters.Regex(r"(?i)\b–º–∞—Ü–∞—Ç—å\b") & filters.REPLY
    shchipok_filter = filters.TEXT & filters.Regex(r"(?i)\b—É—â–∏–ø–Ω—É—Ç—å\b") & filters.REPLY
    app.add_handler(MessageHandler(macat_filter, macat_handler))
    app.add_handler(MessageHandler(shchipok_filter, shchipok_handler))

    app.add_error_handler(on_error)

    print("Bot is running‚Ä¶")
    app.run_polling(allowed_updates=Update.ALL_TYPES, drop_pending_updates=True)


if __name__ == "__main__":
    main()
