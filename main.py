import sqlite3
import time
from random import uniform

from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

DB_PATH = "breast_bot.db"
COOLDOWN_SECONDS = 60 * 60  # 1 —á–∞—Å

# üîë —Ç–≤–æ–π —Ç–æ–∫–µ–Ω (–∫–∞–∫ –ø—Ä–æ—Å–∏–ª ‚Äî –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ)
TOKEN = "8383787249:AAENs2jqlQAIV8FdgIFWPXDw7CUkFSFKRZY"

# üëë —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–≤–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–∏ user_id –∏ –¥—Ä—É–∑–µ–π)
ADMINS = [1338785758, 6540420056]  # <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID

def init_db():
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            last_ts INTEGER DEFAULT 0,
            total_added REAL DEFAULT 0
        )
        """
    )
    con.commit()
    con.close()

def get_user(user_id: int):
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute("SELECT last_ts, total_added FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    if row is None:
        cur.execute(
            "INSERT INTO users (user_id, last_ts, total_added) VALUES (?, ?, ?)",
            (user_id, 0, 0.0),
        )
        con.commit()
        row = (0, 0.0)
    con.close()
    return row

def update_user(user_id: int, last_ts: int, total_added: float):
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute(
        "UPDATE users SET last_ts=?, total_added=? WHERE user_id=?",
        (last_ts, total_added, user_id),
    )
    con.commit()
    con.close()

def fmt_left(seconds: int) -> str:
    m, s = divmod(seconds, 60)
    return (f"{m} –º–∏–Ω {s} —Å–µ–∫" if m and s else f"{m} –º–∏–Ω" if m else f"{s} —Å–µ–∫")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    last_ts, total_added = get_user(uid)
    now = int(time.time())
    elapsed = now - last_ts

    if elapsed < COOLDOWN_SECONDS:
        left = COOLDOWN_SECONDS - elapsed
        await update.message.reply_html(
            f"‚è≥ {user.mention_html()} –µ—â—ë —Ä–∞–Ω–æ–≤–∞—Ç–æ! "
            f"–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏—Ä–æ—Å—Ç —á–µ—Ä–µ–∑ <b>{fmt_left(left)}</b>."
        )
        return

    inc = round(uniform(1, 5), 2)
    total_added = round(total_added + inc, 2)
    update_user(uid, now, total_added)

    await update.message.reply_html(
        f"üéâ {user.mention_html()} –ø–æ–ª—É—á–∏–ª(–∞) –ø—Ä–∏—Ä–æ—Å—Ç <b>+{inc} —Å–º</b>!\n"
        f"üìà –°—É–º–º–∞—Ä–Ω–æ: <b>{total_added} —Å–º</b>.\n"
        f"‚õîÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω–æ ‚Äî —á–µ—Ä–µ–∑ 1 —á–∞—Å."
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    last_ts, total_added = get_user(uid)
    now = int(time.time())
    left = max(0, COOLDOWN_SECONDS - (now - last_ts))
    tip = (f"–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {fmt_left(left)}."
           if left > 0 else "–ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏—Ä–æ—Å—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∫–æ–º–∞–Ω–¥–æ–π /start.")
    await update.message.reply_html(
        f"üìä {user.mention_html()}, –≤–∞—à —Å—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç: <b>{total_added} —Å–º</b>.\n{tip}"
    )

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    if uid not in ADMINS:
        await update.message.reply_text("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    last_ts, total_added = get_user(uid)
    update_user(uid, 0, total_added)
    await update.message.reply_text("‚úÖ –ö—É–ª–¥–∞—É–Ω —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ /start.")

# ¬´–º–∞—Ü–∞—Ç—å¬ª ‚Äî –±–µ–∑ —Å–ª—ç—à–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ reply –Ω–∞ —á—å—ë-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def macat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    actor = update.effective_user
    if not msg or not msg.reply_to_message or not msg.reply_to_message.from_user:
        await msg.reply_text("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–º–∞—Ü–∞—Ç—å¬ª.")
        return
    target = msg.reply_to_message.from_user
    text = f"ü§è {actor.mention_html()} –ø–æ–º–∞—Ü–∞–ª(–∞) {target.mention_html()} üò≥"
    await msg.reply_html(text)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏—Ä–æ—Å—Ç (—Ä–∞–∑ –≤ —á–∞—Å)\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "(–≤ –≥—Ä—É–ø–ø–µ) –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–º–∞—Ü–∞—Ç—å¬ª\n"
        "(/reset ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
    )

def main():
    init_db()
    app = Application.builder().token(TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler(["start", "growchest"], start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("reset", reset))

    # –º–∞—Ü–∞—Ç—å (–Ω—É–∂–Ω–æ /setprivacy Disable —É –±–æ—Ç–∞)
    macat_filter = filters.TEXT & filters.Regex(r"(?i)\b–º–∞—Ü–∞—Ç—å\b") & filters.REPLY
    app.add_handler(MessageHandler(macat_filter, macat_handler))

    print("Bot is running‚Ä¶")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
