import sqlite3
import time
from random import uniform

from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

DB_PATH = "breast_bot.db"
COOLDOWN_SECONDS = 60 * 60  # 1 —á–∞—Å

# üîë —Ç–≤–æ–π —Ç–æ–∫–µ–Ω (–∫–∞–∫ –ø—Ä–æ—Å–∏–ª ‚Äî –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ)
TOKEN = "8383787249:AAENs2jqlQAIV8FdgIFWPXDw7CUkFSFKRZY"

# üëë —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ (–≤–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–∏ user_id –∏ –¥—Ä—É–∑–µ–π)
ADMINS = [1338785758, 6540420056]  # <-- –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID


def init_db():
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            last_ts INTEGER DEFAULT 0,
            total_added REAL DEFAULT 0
        )
        """
    )
    con.commit()
    con.close()


def get_user(user_id: int):
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute("SELECT last_ts, total_added FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    if row is None:
        cur.execute(
            "INSERT INTO users (user_id, last_ts, total_added) VALUES (?, ?, ?)",
            (user_id, 0, 0.0),
        )
        con.commit()
        row = (0, 0.0)
    con.close()
    return row


def update_user(user_id: int, last_ts: int, total_added: float):
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute(
        "UPDATE users SET last_ts=?, total_added=? WHERE user_id=?",
        (last_ts, total_added, user_id),
    )
    con.commit()
    con.close()


def fmt_left(seconds: int) -> str:
    m, s = divmod(seconds, 60)
    return (f"{m} –º–∏–Ω {s} —Å–µ–∫" if m and s else f"{m} –º–∏–Ω" if m else f"{s} —Å–µ–∫")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    last_ts, total_added = get_user(uid)
    now = int(time.time())
    elapsed = now - last_ts

    if elapsed < COOLDOWN_SECONDS:
        left = COOLDOWN_SECONDS - elapsed
        await update.message.reply_html(
            f"‚è≥ {user.mention_html()} –µ—â—ë —Ä–∞–Ω–æ–≤–∞—Ç–æ! "
            f"–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏—Ä–æ—Å—Ç —á–µ—Ä–µ–∑ <b>{fmt_left(left)}</b>."
        )
        return

    inc = round(uniform(1, 5), 2)
    total_added = round(total_added + inc, 2)
    update_user(uid, now, total_added)

    await update.message.reply_html(
        f"üéâ {user.mention_html()} –ø–æ–ª—É—á–∏–ª(–∞) –ø—Ä–∏—Ä–æ—Å—Ç <b>+{inc} —Å–º</b>!\n"
        f"üìà –°—É–º–º–∞—Ä–Ω–æ: <b>{total_added} —Å–º</b>.\n"
        f"‚õîÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω–æ ‚Äî —á–µ—Ä–µ–∑ 1 —á–∞—Å."
    )


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    last_ts, total_added = get_user(uid)
    now = int(time.time())
    left = max(0, COOLDOWN_SECONDS - (now - last_ts))
    tip = (f"–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {fmt_left(left)}."
           if left > 0 else "–ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏—Ä–æ—Å—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∫–æ–º–∞–Ω–¥–æ–π /start.")
    await update.message.reply_html(
        f"üìä {user.mention_html()}, –≤–∞—à —Å—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç: <b>{total_added} —Å–º</b>.\n{tip}"
    )


async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = user.id
    if uid not in ADMINS:
        await update.message.reply_text("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    last_ts, total_added = get_user(uid)
    update_user(uid, 0, total_added)
    await update.message.reply_text("‚úÖ –ö—É–ª–¥–∞—É–Ω —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ /start.")


# ¬´–º–∞—Ü–∞—Ç—å¬ª ‚Äî –±–µ–∑ —Å–ª—ç—à–∞, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ reply –Ω–∞ —á—å—ë-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def macat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    actor = update.effective_user
    if not msg or not msg.reply_to_message or not msg.reply_to_message.from_user:
        await msg.reply_text("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–º–∞—Ü–∞—Ç—å¬ª.")
        return
    target = msg.reply_to_message.from_user
    text = f"ü§è {actor.mention_html()} –ø–æ–º–∞—Ü–∞–ª(–∞) {target.mention_html()} üò≥"
    await msg.reply_html(text)


# üî• /top ‚Äî –ª–∏–¥–µ—Ä–±–æ—Ä–¥ —Å—Ä–µ–¥–∏ –£–ß–ê–°–¢–ù–ò–ö–û–í –¢–ï–ö–£–©–ï–ì–û –ß–ê–¢–ê –ø–æ –∏—Ö –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É total_added
async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    try:
        limit = int(context.args[0]) if context.args else 10
        limit = max(1, min(50, limit))
    except Exception:
        limit = 10

    # –±–µ—Ä—ë–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö, –∫—Ç–æ —Å–æ—Å—Ç–æ–∏—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ
    con = sqlite3.connect(DB_PATH)
    cur = con.cursor()
    cur.execute("SELECT user_id, total_added FROM users ORDER BY total_added DESC")
    all_rows = cur.fetchall()
    con.close()

    rows = []
    for uid, total in all_rows:
        try:
            member = await context.bot.get_chat_member(chat.id, uid)
            if member.status not in ("left", "kicked"):
                rows.append((member.user, total))  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç User, —á—Ç–æ–±—ã –∫—Ä–∞—Å–∏–≤–æ —É–ø–æ–º—è–Ω—É—Ç—å
        except:
            continue
        if len(rows) >= limit:
            break

    if not rows:
        await update.message.reply_text("–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—Ä–∞—Å—Ç–∏–ª üòÖ")
        return

    lines = []
    for i, (user_obj, total) in enumerate(rows, start=1):
        lines.append(f"{i}. {user_obj.mention_html()} ‚Äî <b>{total} —Å–º</b>")

    await update.message.reply_html("üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞:\n" + "\n".join(lines))


# üëë /setSize ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   1) –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –Ω–∞–ø–∏—à–∏: /setSize 123.45
#   2) –ò–ª–∏: /setSize <user_id> 123.45
async def set_size(update: Update, context: ContextTypes.DEFAULT_TYPE):
    caller = update.effective_user
    if caller.id not in ADMINS:
        await update.message.reply_text("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return

    msg = update.message

    target_user_id = None
    new_size = None

    # –í–∞—Ä–∏–∞–Ω—Ç 1: reply -> /setSize 123.45
    if msg.reply_to_message and msg.reply_to_message.from_user:
        if not context.args:
            await msg.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–≤–µ–¥–∏—Ç–µ /setSize <—á–∏—Å–ª–æ>")
            return
        try:
            new_size = float(context.args[0])
        except ValueError:
            await msg.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
        target_user_id = msg.reply_to_message.from_user.id

    # –í–∞—Ä–∏–∞–Ω—Ç 2: /setSize <user_id> <—á–∏—Å–ª–æ>
    else:
        if len(context.args) < 2:
            await msg.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setSize <user_id> <—á–∏—Å–ª–æ>  (–∏–ª–∏ –ø–æ reply: /setSize <—á–∏—Å–ª–æ>)")
            return
        try:
            target_user_id = int(context.args[0])
        except ValueError:
            await msg.reply_text("‚ö†Ô∏è –í–º–µ—Å—Ç–æ <user_id> –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        try:
            new_size = float(context.args[1])
        except ValueError:
            await msg.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return

    # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î
    last_ts, _ = get_user(target_user_id)  # —Å–æ–∑–¥–∞—Å—Ç –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –Ω–µ—Ç
    update_user(target_user_id, last_ts, float(new_size))

    # –î–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å (–µ—Å–ª–∏ –±–æ—Ç –≤ —á–∞—Ç–µ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
    mention_html = f"<a href=\"tg://user?id={target_user_id}\">user {target_user_id}</a>"
    try:
        member = await context.bot.get_chat_member(update.effective_chat.id, target_user_id)
        mention_html = member.user.mention_html()
    except:
        pass

    await msg.reply_html(f"‚úÖ –†–∞–∑–º–µ—Ä –¥–ª—è {mention_html} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{float(new_size)} —Å–º</b>")


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏—Ä–æ—Å—Ç (—Ä–∞–∑ –≤ —á–∞—Å)\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/top [N] ‚Äî —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≠–¢–û–ì–û —á–∞—Ç–∞\n"
        "/setSize ‚Äî (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã) reply: /setSize <—á–∏—Å–ª–æ>  –∏–ª–∏  /setSize <user_id> <—á–∏—Å–ª–æ>\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "(–≤ –≥—Ä—É–ø–ø–µ) –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–º–∞—Ü–∞—Ç—å¬ª\n"
        "(/reset ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"
    )


def main():
    init_db()
    app = Application.builder().token(TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler(["start", "growchest"], start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("top", top))
    app.add_handler(CommandHandler("setSize", set_size))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("reset", reset))

    # –º–∞—Ü–∞—Ç—å (–Ω—É–∂–Ω–æ /setprivacy Disable —É –±–æ—Ç–∞)
    macat_filter = filters.TEXT & filters.Regex(r"(?i)\b–º–∞—Ü–∞—Ç—å\b") & filters.REPLY
    app.add_handler(MessageHandler(macat_filter, macat_handler))

    print("Bot is running‚Ä¶")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
